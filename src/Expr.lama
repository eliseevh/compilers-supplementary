-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of 
    Var (vName) -> st (vName)
  | Const (value) -> value
  | Binop (op, left, right) -> case evalExpr(st, left) of
      leftValue ->  case evalExpr(st, right) of 
        rightValue -> evalBinop(op, leftValue, rightValue)
      esac
    esac
  esac
}

public fun evalBinop (op, l, r) {
  case op of 
    "+"  -> l + r
  | "-"  -> l - r
  | "*"  -> l * r
  | "/"  -> l / r
  | "%"  -> l % r
  | "==" -> l == r
  | "!=" -> l != r
  | "<"  -> l < r
  | "<=" -> l <= r
  | ">"  -> l > r
  | ">=" -> l >= r
  | "&&" -> l && r
  | "!!" -> l !! r
  esac
}