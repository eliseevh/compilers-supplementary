-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun evalStep (c, inst) {
  case c of
    [stack, state, world] -> case inst of
      READ -> case readWorld (world) of
        [value, nextWorld] -> [value : stack, state, nextWorld]
      esac
    | WRITE -> case stack of
        value : newStack -> [newStack, state, writeWorld (value, world)]
      esac
    | BINOP (op) -> case stack of
        right : left : newStack -> [evalBinop (op, left, right) : newStack, state, world]
      esac
    | LD (varName) -> [state (varName) : stack, state, world]
    | ST (varName) -> case stack of
        value : newStack -> [newStack, state <- [varName, value], world]
      esac
    | CONST (value) -> [value : stack, state, world]
    esac
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    {} -> c
  | inst : rest -> eval (evalStep (c, inst), rest)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (varName) -> LD (varName) : {}
  | Const (value) -> CONST (value) : {}
  | Binop (op, left, right) -> case compileExpr (left) of
      leftInsns -> case compileExpr (right) of
        rightInsns -> leftInsns +++ rightInsns +++ (BINOP (op) : {})
      esac
    esac
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of 
    Assn (varName, expr) -> compileExpr (expr) +++ (ST (varName) : {})
  | Seq (first, second) -> compileSM (first) +++ compileSM (second)
  | Skip -> {}
  | Read (varName) -> READ : ST (varName) : {}
  | Write (expr) -> compileExpr (expr) +++ (WRITE : {})
  esac
}
