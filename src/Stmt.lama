-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
  case c of
    [state, world] -> case stmt of 
      Assn (varName, expr) -> [state <- [varName, evalExpr (state, expr)], world]
    | Seq (first, second) -> case eval (c, first) of
        nextC -> eval(nextC, second)
      esac
    | Skip -> c
    | Read (varName) -> case readWorld (world) of
        [value, nextWorld] -> [state <- [varName, value], nextWorld]
      esac
    | Write (expr) -> case evalExpr (state, expr) of
        value -> [state, writeWorld (value, world)]
      esac
    esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
